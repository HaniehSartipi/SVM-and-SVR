from sklearn.svm import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import mean_squared_error
import pandas as pd
from sklearn.datasets import load_diabetes
from sklearn.linear_model import LinearRegression
from sklearn.metrics import accuracy_score

diabetes = load_diabetes()
X = pd.DataFrame(diabetes.data, columns=diabetes.feature_names)
y = diabetes.target
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)



svr = SVR(kernel='rbf')
param_grid = {'C': [0.1, 2,8,10,9,50,100],
              'epsilon': [0.01,0.1,0.2,0.3,0.5,0.8,1]}
rbfsvr = GridSearchCV(svr, param_grid, cv=5)
rbfsvr.fit(X_train, y_train)
y_pred = rbfsvr.predict(X_test)
rmse = mean_squared_error(y_test, y_pred, squared=False)
print(f"RMSE: {rmse:.2f}")

y_pred = rbfsvr.predict(X_test)
accuracy = rbfsvr.score(X_test, y_test)
print(f"Accuracy: {accuracy:.2f}")
print(f"Best hyperparameters:{rbfsvr.best_params_}")

svr = SVR(kernel='linear')
param_grid = {'C': [0.01, 0.05,0.1,0.5,1,2,2.5],
              'epsilon': [0.01,0.1,0.2,0.3,0.4,0.5,0.6]
           }
linearsvr = GridSearchCV(svr, param_grid, cv=5)
linearsvr.fit(X_train, y_train)
y_pred = linearsvr.predict(X_test)
rmse = mean_squared_error(y_test, y_pred, squared=False)
print(f"RMSE: {rmse:.2f}")

y_pred = linearsvr.predict(X_test)
accuracy = linearsvr.score(X_test, y_test)
print(f"Accuracy: {accuracy:.2f}")
print(f"Best hyperparameters:{linearsvr.best_params_}")

svr = SVR(kernel='poly')
param_grid = {'C': [0.01, 0.05,0.1,0.5,1,2,2.5],
              'degree':[2,3,4],
               'epsilon': [0.01,0.1,0.2,0.3,0.4,0.5,0.6],
              'coef0' : [0.01,0.1,0.2,0.3,0.6,1,1.5,2]
           }
polysvr = GridSearchCV(svr, param_grid, cv=5)
polysvr.fit(X_train, y_train)
y_pred = polysvr.predict(X_test)
rmse = mean_squared_error(y_test, y_pred, squared=False)
print(f"RMSE: {rmse:.2f}")

y_pred = polysvr.predict(X_test)
accuracy = polysvr.score(X_test, y_test)
print(f"Accuracy: {accuracy:.2f}")
print(f"Best hyperparameters:{polysvr.best_params_}")



linearReg = LinearRegression()
linearReg.fit(X_train, y_train)
y_pred = linearReg.predict(X_test)
accuracy = linearReg.score(X_test, y_test)
accuracy

